{"/home/travis/build/npmtest/node-npmtest-node-phantom/test.js":"/* istanbul instrument in package npmtest_node_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-phantom/lib.npmtest_node_phantom.js":"/* istanbul instrument in package npmtest_node_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_phantom = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_phantom = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-phantom/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-phantom && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_phantom\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_phantom.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_phantom.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_phantom.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_phantom.__dirname + '/lib.npmtest_node_phantom.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-phantom/node_modules/node-phantom/node-phantom.js":"//Released to the public domain.\n\nvar http=require('http');\nvar socketio=require('socket.io');\nvar child=require('child_process');\n\nfunction callbackOrDummy(callback){\n\tif(callback===undefined)callback=function(){};\n\treturn callback;\n}\nfunction unwrapArray(arr) {\n\treturn arr && arr.length == 1 ? arr[0] : arr\n}\n\nmodule.exports={\n\tcreate:function(callback,options){\n\t\tif(options===undefined)options={};\n\t\tif(options.phantomPath===undefined)options.phantomPath='phantomjs';\n\t\tif(options.parameters===undefined)options.parameters={};\n\n\t\tfunction spawnPhantom(port,callback){\n\t\t\tvar args=[];\n\t\t\tfor(var parm in options.parameters) {\n\t\t\t\targs.push('--' + parm + '=' + options.parameters[parm]);\n\t\t\t}\n\t\t\targs=args.concat([__dirname + '/bridge.js', port]);\n\n\t\t\tvar phantom=child.spawn(options.phantomPath,args);\n\t\t\tphantom.stdout.on('data',function(data){\n\t\t\t\treturn console.log('phantom stdout: '+data);\n\t\t\t});\n\t\t\tphantom.stderr.on('data',function(data){\n\t\t\t\treturn console.warn('phantom stderr: '+data);\n\t\t\t});\n\t\t\tvar hasErrors=false;\n\t\t\tphantom.on('error',function(){\n\t\t\t\thasErrors=true;\n\t\t\t});\n\t\t\tphantom.on('exit',function(code){\n\t\t\t\thasErrors=true; //if phantom exits it is always an error\n\t\t\t});\n\t\t\tsetTimeout(function(){ //wait a bit to see if the spawning of phantomjs immediately fails due to bad path or similar\n\t\t\t\tcallback(hasErrors,phantom);\n\t\t\t},100);\n\t\t}\n\t\t\n\t\tvar server=http.createServer(function(request,response){\n\t\t\tresponse.writeHead(200,{\"Content-Type\": \"text/html\"});\n\t\t\tresponse.end('<html><head><script src=\"/socket.io/socket.io.js\" type=\"text/javascript\"></script><script type=\"text/javascript\">\\n\\\n\t\t\t\twindow.onload=function(){\\n\\\n\t\t\t\t\tvar socket = new io.connect(\"http://\" + window.location.hostname);\\n\\\n\t\t\t\t\tsocket.on(\"cmd\", function(msg){\\n\\\n\t\t\t\t\t\talert(msg);\\n\\\n\t\t\t\t\t});\\n\\\n\t\t\t\t\twindow.socket = socket;\\n\\\n\t\t\t\t};\\n\\\n\t\t\t</script></head><body></body></html>');\n\t\t}).listen(function(){\t\t\t\n\t\t\tvar io=socketio.listen(server,{'log level':1});\n\t\n\t\t\tvar port=server.address().port;\n\t\t\tspawnPhantom(port,function(err,phantom){\n\t\t\t\tif(err){\n\t\t\t\t\tserver.close();\n\t\t\t\t\tcallback(true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar pages={};\n\t\t\t\tvar cmds={};\n\t\t\t\tvar cmdid=0;\n\t\t\t\tfunction request(socket,args,callback){\n\t\t\t\t\targs.splice(1,0,cmdid);\n//\t\t\t\t\tconsole.log('requesting:'+args);\n\t\t\t\t\tsocket.emit('cmd',JSON.stringify(args));\n\t\n\t\t\t\t\tcmds[cmdid]={cb:callback};\n\t\t\t\t\tcmdid++;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tio.sockets.on('connection',function(socket){\n\t\t\t\t\tsocket.on('res',function(response){\n//\t\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t\tvar id=response[0];\n\t\t\t\t\t\tvar cmdId=response[1];\n\t\t\t\t\t\tswitch(response[2]){\n\t\t\t\t\t\tcase 'pageCreated':\n\t\t\t\t\t\t\tvar pageProxy={\n\t\t\t\t\t\t\t\topen:function(url, callback){\n\t\t\t\t\t\t\t\t\tif(callback === undefined){\n\t\t\t\t\t\t\t\t\t\trequest(socket, [id, 'pageOpen', url]);\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\trequest(socket, [id, 'pageOpenWithCallback', url], callback);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tclose:function(callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageClose'],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trender:function(filename,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageRender',filename],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trenderBase64:function(extension,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageRenderBase64',extension],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinjectJs:function(url,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageInjectJs',url],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tincludeJs:function(url,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageIncludeJs',url],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsendEvent:function(event,x,y,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageSendEvent',event,x,y],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tuploadFile:function(selector,filename,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageUploadFile',selector,filename],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tevaluate:function(evaluator,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageEvaluate',evaluator.toString()].concat(Array.prototype.slice.call(arguments,2)),callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t                            evaluateAsync:function(evaluator,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageEvaluateAsync',evaluator.toString()].concat(Array.prototype.slice.call(arguments,2)),callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tset:function(name,value,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageSet',name,value],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tget:function(name,callback){\n\t\t\t\t\t\t\t\t\trequest(socket,[id,'pageGet',name],callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsetFn: function(pageCallbackName, fn, callback) {\n\t\t\t\t\t\t\t\t\trequest(socket, [id, 'pageSetFn', pageCallbackName, fn.toString()], callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsetViewport: function(viewport, callback) {\n\t\t\t\t\t\t\t\t\trequest(socket, [id, 'pageSetViewport', viewport.width, viewport.height], callbackOrDummy(callback));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpages[id] = pageProxy;\n\t\t\t\t\t\t\tcmds[cmdId].cb(null,pageProxy);\n\t\t\t\t\t\t\tdelete cmds[cmdId];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'phantomExited':\n\t\t\t\t\t\t\trequest(socket,[0,'exitAck']);\n\t\t\t\t\t\t\tserver.close();\n\t\t\t\t\t\t\tio.set('client store expiration', 0);\n\t\t\t\t\t\t\tcmds[cmdId].cb();\n\t\t\t\t\t\t\tdelete cmds[cmdId];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'pageJsInjected':\n\t\t\t\t\t\tcase 'jsInjected':\n\t\t\t\t\t\t\tcmds[cmdId].cb(JSON.parse(response[3])===true ? null : true);\n\t\t\t\t\t\t\tdelete cmds[cmdId];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'pageOpened':\n\t\t\t\t\t\t\tif(cmds[cmdId]!==undefined){ //if page is redirected, the pageopen event is called again - we do not want that currently.\n\t\t\t\t\t\t\t\tif(cmds[cmdId].cb !== undefined){\n\t\t\t\t\t\t\t\t\tcmds[cmdId].cb(null, response[3]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdelete cmds[cmdId];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'pageRenderBase64Done':\n\t\t\t\t\t\t\tcmds[cmdId].cb(null,response[3]);\n\t\t\t\t\t\t\tdelete cmds[cmdId];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'pageGetDone':\n\t\t\t\t\t\tcase 'pageEvaluated':\n\t\t\t\t\t\t\tcmds[cmdId].cb(null,JSON.parse(response[3]));\n\t\t\t\t\t\t\tdelete cmds[cmdId];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'pageClosed':\n\t\t\t\t\t\t\tdelete pages[id]; // fallthru\n\t\t\t\t\t\tcase 'pageSetDone':\n\t\t\t\t\t\tcase 'pageJsIncluded':\n\t\t\t\t\t\tcase 'cookieAdded':\n\t\t\t\t\t\tcase 'pageRendered':\n\t\t\t\t\t\tcase 'pageEventSent':\n\t\t\t\t\t\tcase 'pageFileUploaded':\n\t\t\t\t\t\tcase 'pageSetViewportDone':\n\t\t\t\t\t\tcase 'pageEvaluatedAsync':\n\t\t\t\t\t\t\tcmds[cmdId].cb(null);\n\t\t\t\t\t\t\tdelete cmds[cmdId];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error('got unrecognized response:'+response);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tsocket.on('push', function(request) {\n\t\t\t\t\t\tvar id = request[0];\n\t\t\t\t\t\tvar cmd = request[1];\n\t\t\t\t\t\tvar callback = callbackOrDummy(pages[id] ? pages[id][cmd] : undefined);\n\t\t\t\t\t\tcallback(unwrapArray(request[2]));\n\t\t\t\t\t});\n\t\t\t\t\tvar proxy={\n\t\t\t\t\t\tcreatePage:function(callback){\n\t\t\t\t\t\t\trequest(socket,[0,'createPage'],callbackOrDummy(callback));\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinjectJs:function(filename,callback){\n\t\t\t\t\t\t\trequest(socket,[0,'injectJs',filename],callbackOrDummy(callback));\n\t\t\t\t\t\t},\n\t\t\t\t\t\taddCookie: function(cookie, callback){\n\t\t\t\t\t\t\trequest(socket,[0,'addCookie', cookie],callbackOrDummy(callback));\n\t\t\t\t\t\t},\n\t\t\t\t\t\texit:function(callback){\n\t\t\t\t\t\t\tphantom.removeListener('exit',prematureExitHandler); //an exit is no longer premature now\n\t\t\t\t\t\t\trequest(socket,[0,'exit'],callbackOrDummy(callback));\n\t\t\t\t\t\t},\n\t\t\t\t\t\ton: function(){\n\t\t\t\t\t\t\tphantom.on.apply(phantom, arguments);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t_phantom: phantom\n\t\t\t\t\t};\n\t\t\t\t\n\t\t\t\t\tcallback(null,proxy);\n\t\t\t\t});\n\t\n\t\t\t\t// An exit event listener that is registered AFTER the phantomjs process\n\t\t\t\t// is successfully created.\n\t\t\t\tvar prematureExitHandler=function(code,signal){\n\t\t\t\t\tconsole.warn('phantom crash: code '+code);\n\t\t\t\t\tserver.close();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tphantom.on('exit',prematureExitHandler);\n\t\t\t});\n\t\t});\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-node-phantom/node_modules/node-phantom/bridge.js":"//Released to the public domain.\n\nvar port=phantom.args[0];\nvar webpage=require('webpage');\nvar controlpage=webpage.create();\n\n\nfunction respond(response){\n//\tconsole.log('responding:'+response);\n\tcontrolpage.evaluate('function(){socket.emit(\"res\",'+JSON.stringify(response)+');}');\n}\n\nvar pages={};\nvar pageId=1;\n\nfunction setupPushNotifications(id, page) {\n\tvar callbacks=['onAlert','onConfirm','onConsoleMessage','onError','onInitialized','onLoadFinished',\n\t               'onLoadStarted','onPrompt','onResourceRequested','onResourceReceived','onResourceError',\n\t               'onUrlChanged','onCallback'];\n\tfunction push(notification){\n\t\tcontrolpage.evaluate('function(){socket.emit(\"push\",'+JSON.stringify(notification)+');}');\n\t}\n\tcallbacks.forEach(function(cb) {\n\t\tpage[cb]=function(parm){\n\t\t\tvar notification=Array.prototype.slice.call(arguments);\n\t\t\tif((cb==='onResourceRequested')&&(parm.url.indexOf('data:image')===0)) return;\n\n\t\t\tpush([id, cb, notification]);\n\t\t};\n\t});\n}\n\ncontrolpage.onAlert=function(msg){\n\tvar request=JSON.parse(msg);\n\tvar cmdId=request[1];\n//\tconsole.log(request);\n\tif(request[0]===0){\n\t\tswitch(request[2]){\n\t\tcase 'createPage':\n\t\t\tvar id=pageId++;\n\t\t\tvar page=webpage.create();\n\t\t\tpages[id]=page;\n\t\t\tsetupPushNotifications(id, page);\n\t\t\trespond([id,cmdId,'pageCreated']);\n\t\t\tbreak;\n\t\tcase 'injectJs':\n\t\t\tvar success=phantom.injectJs(request[3]);\n\t\t\trespond([0,cmdId,'jsInjected',success]);\n\t\t\tbreak;\n\t\tcase 'addCookie':\n\t\t\tphantom.addCookie(request[3]);\n\t\t\trespond([0,cmdId,'cookieAdded',success]);\n\t\t\tbreak;\n\t\tcase 'exit':\n\t\t\trespond([0,cmdId,'phantomExited']); //optimistically to get the response back before the line is cut\n\t\t\tbreak;\n\t\tcase 'exitAck':\n\t\t\tphantom.exit();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.error('unrecognized request:'+request);\n\t\t\tbreak;\n\t\t}\n\t}\n\telse{\n\t\tvar id=request[0];\n\t\tvar page=pages[id];\n\t\tswitch(request[2]){\n\t\tcase 'pageOpen':\n\t\t\tpage.open(request[3]);\n\t\t\tbreak;\n\t\tcase 'pageOpenWithCallback':\n\t\t\tpage.open(request[3], function(status){\n\t\t\t\trespond([id, cmdId, 'pageOpened', status]);\n\t\t\t});\n\t\t\tbreak;\n\t\tcase 'pageClose':\n\t\t\tpage.close();\n\t\t\trespond([id,cmdId,'pageClosed']);\n\t\t\tbreak;\n\t\tcase 'pageInjectJs':\n\t\t\tvar result=page.injectJs(request[3]);\n\t\t\trespond([id,cmdId,'pageJsInjected',JSON.stringify(result)]);\n\t\t\tbreak;\n\t\tcase 'pageIncludeJs':\n\t\t\tvar alreadyGotCallback=false;\n\t\t\tpage.includeJs(request[3], function(){\n\t\t\t\tif(alreadyGotCallback)return;\n\t\t\t\trespond([id,cmdId,'pageJsIncluded']);\n\t\t\t\talreadyGotCallback=true;\n\t\t\t});\n\t\t\tbreak;\n\t\tcase 'pageSendEvent':\n\t\t\tpage.sendEvent(request[3],request[4],request[5]);\n\t\t\trespond([id,cmdId,'pageEventSent']);\n\t\t\tbreak;\n\t\tcase 'pageUploadFile':\n\t\t\tpage.uploadFile(request[3],request[4]);\n\t\t\trespond([id,cmdId,'pageFileUploaded']);\n\t\t\tbreak;\n\t\tcase 'pageEvaluate':\n\t\t\tvar result=page.evaluate.apply(page,request.slice(3));\n\t\t\trespond([id,cmdId,'pageEvaluated',JSON.stringify(result)]);\n\t\t\tbreak;\n        case 'pageEvaluateAsync':\n\t\t\tpage.evaluateAsync.apply(page,request.slice(3));\n\t\t\trespond([id,cmdId,'pageEvaluatedAsync']);\n\t\t\tbreak;\n\t\tcase 'pageRender':\n\t\t\tpage.render(request[3]);\n\t\t\trespond([id,cmdId,'pageRendered']);\n\t\t\tbreak;\n\t\tcase 'pageRenderBase64':\n\t\t\tvar result=page.renderBase64(request[3]);\n\t\t\trespond([id,cmdId,'pageRenderBase64Done', result]);\n\t\t\tbreak;\n\t\tcase 'pageSet':\n\t\t\tpage[request[3]]=request[4];\n\t\t\trespond([id,cmdId,'pageSetDone']);\n\t\t\tbreak;\n\t\tcase 'pageGet':\n\t\t\tvar result=page[request[3]];\n\t\t\trespond([id,cmdId,'pageGetDone',JSON.stringify(result)]);\n\t\t\tbreak;\n\t\tcase 'pageSetFn':\n\t\t\tpage[request[3]] = eval('(' + request[4] + ')')\n\t\t\tbreak;\n\t\tcase 'pageSetViewport':\n\t\t\tpage.viewportSize = {width:request[3], height:request[4]};\n\t\t\trespond([id,cmdId,'pageSetViewportDone']);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.error('unrecognized request:'+request);\n\t\t\tbreak;\n\t\t}\n\t}\n\t//console.log('command:'+parts[1]);\n\treturn;\n};\n\ncontrolpage.onConsoleMessage=function(msg){\n\treturn console.log('console msg:'+msg);\n};\n\ncontrolpage.open('http://127.0.0.1:'+port+'/',function(status){\n\t//console.log(status);\n});\n"}